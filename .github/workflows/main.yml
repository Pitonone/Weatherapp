name: Check Naming Convention

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  naming-convention-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Run naming convention check
        run: |
          echo "Checking C++ naming conventions..."
          python3 - <<'EOF'
          import os
          import re

          # Define regex patterns
          patterns = {
              "Member Variable": r"\bm[A-Z][a-zA-Z0-9_]*",
              "Parameter": r"\bp[A-Z][a-zA-Z0-9_]*",
              "Local Variable": r"\bl[A-Z][a-zA-Z0-9_]*",
              "Constant": r"\bK[A-Z][a-zA-Z0-9_]*",
              "Static Variable": r"\bs[A-Z][a-zA-Z0-9_]*",
              "Class Name": r"\b[A-Z][a-zA-Z0-9_]*\s*{",
              "Function Name": r"\b[a-z][a-zA-Z0-9_]*\s*\(",
              "Braces New Line": r"[^\n]\s*{",
              "Spacing Inside Parentheses": r"\(\S|\S\)"
          }

          corrections = {
              "Braces New Line": (r"([^\n])\s*{", r"\1\n{"),
              "Spacing Inside Parentheses": (r"\(\s*(\S.*?)\s*\)", r"( \1 )"),
              "Ensure Whitespace Inside Parentheses": (r"\((\S)", r"( \1"), (r"(\S)\)", r"\1 )")
          }

          errors = []

          # Walk through the repository and check C++ files
          for root, _, files in os.walk("."):
              for file in files:
                  if (file.endswith(".cpp") or file.endswith(".h")) and file != "main.cpp":
                      file_path = os.path.join(root, file)
                      with open(file_path, "r", encoding="utf-8") as f:
                          lines = f.readlines()

                      corrected_lines = []
                      for i, line in enumerate(lines, start=1):
                          original_line = line
                          for category, pattern in patterns.items():
                              if re.search(pattern, line) is None:
                                  errors.append(f"{file}:{i}: Naming violation in {category}: {line.strip()}")
                          for category, correction in corrections.items():
                              if isinstance(correction, tuple) and len(correction) == 2:
                                  line = re.sub(correction[0], correction[1], line)
                              elif isinstance(correction, tuple) and len(correction) == 3:
                                  line = re.sub(correction[0], correction[1], line)
                                  line = re.sub(correction[2], correction[3], line)
                          corrected_lines.append(line)

                      with open(file_path, "w", encoding="utf-8") as f:
                          f.writelines(corrected_lines)

          # Output results
          if errors:
              print("Naming convention violations found and fixed:")
              for error in errors:
                  print(error)
          else:
              print("All naming conventions passed!")
          EOF
